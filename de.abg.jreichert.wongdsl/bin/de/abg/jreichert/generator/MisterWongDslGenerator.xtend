/*
 * generated by Xtext
 */
package de.abg.jreichert.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*
import static extension org.eclipse.xtext.xbase.lib.IterableExtensions.*
import de.abg.jreichert.misterWongDsl.BookmarkFile
import java.util.ArrayList
import java.util.Collection
import de.abg.jreichert.misterWongDsl.Link
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.EcoreUtil2
import de.abg.jreichert.misterWongDsl.MisterWongDslFactory
import java.util.Collections
import java.io.IOException


class MisterWongDslGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(file : resource.allContentsIterable.filter(typeof(BookmarkFile))) {
			fsa.generateFile(file.eResource.URI.trimFileExtension.lastSegment + "_wong.txt", addressFile(file))
			mdsdFiltered(resource)
		}
	}
	
	def addressFile(BookmarkFile file) '''
		«FOR link : file.links.sortByName» 
			* Link «link.name»: «link.url»
		«ENDFOR»	
	'''
	
	def Collection<Link> sortByName(Collection<Link> links) {
		links.sort([ a, b | compareLinks(a,b) ])
	}

	def int compareLinks(Link a, Link b) {
		if(a.name == null) {
			if(b.name == null) {
				0
			} else {
				-1
			}
		} else {
			if(b.name == null) {
				1
			} else {
				a.name.toLowerCase.compareTo(b.name.toLowerCase)
			}
		}
	}
	
	def mdsdFiltered(Resource resource) {
		try {
			val newUriStr = resource.URI.path
				.replace(".wong", "_filtered.wong")
				.replace("/resource", "")
				.replace("src", "src-gen")
			val newUri = URI::createPlatformResourceURI(newUriStr, true)
			val newRes = resource.resourceSet.createResource(newUri)
			val root = resource.allContentsIterable.filter(typeof(BookmarkFile)).head
			val newRoot = MisterWongDslFactory::eINSTANCE.createBookmarkFile
			newRoot.name = root.name
			newRoot.header = root.header
			newRoot.links.addAll(
				root.links.filter(link | 
					link.tags.split(" ").contains("modellgetriebene_entwicklung")
				).map(link | EcoreUtil2::clone(link))
			)
			newRes.contents.add(newRoot)
			newRes.save(Collections::EMPTY_MAP)
		} catch(IOException ioe) {
			ioe.printStackTrace
		}
	}
}
