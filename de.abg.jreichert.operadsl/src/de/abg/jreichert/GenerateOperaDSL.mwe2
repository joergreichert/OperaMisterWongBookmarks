module de.abg.jreichert.GenerateOperaDSL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "adr"
var projectName = "de.abg.jreichert.operadsl"
var grammarURI = "platform:/resource/${projectName}/src/de/abg/jreichert/OperaDSL.xtext"
var runtimeProject = "../${projectName}"
var testProject = "../${projectName}.tests"
var generateXtendStub = false
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
    	resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
		platformUri = "${runtimeProject}/.."
    }

	component = DirectoryCleaner {  directory = "${runtimeProject}/src-gen"     }
	component = DirectoryCleaner {  directory = "${runtimeProject}/model"       }
	component = DirectoryCleaner {  directory = "${runtimeProject}.ui/src-gen"  }

    component = Generator {
    	pathRtProject = runtimeProject
    	pathUiProject = "${runtimeProject}.ui"
    	pathTestProject = "${testProject}"
    	projectNameRt = projectName
    	projectNameUi = "${projectName}.ui"
		encoding = encoding
		language = auto-inject {
    		forcedResourceSet = theResourceSet
    		uri = grammarURI
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    		fragment = ecore.EMFGeneratorFragment auto-inject {  emfRuntimeVersion = "2.10"  }
    		fragment = serializer.SerializerFragment auto-inject {  generateStub = false  }
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
            fragment = validation.JavaValidatorFragment auto-inject {
                // composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
			fragment = exporting.SimpleNamesFragment auto-inject {}
            fragment = builder.BuilderIntegrationFragment auto-inject {}
            fragment = generator.GeneratorFragment auto-inject {
                generateMwe = true
                generateJavaMain = true
            }
            fragment = formatting.FormatterFragment auto-inject {}
            fragment = labeling.LabelProviderFragment auto-inject {}
            fragment = outline.OutlineTreeProviderFragment auto-inject {}
            fragment = outline.QuickOutlineFragment auto-inject {}
            fragment = quickfix.QuickfixProviderFragment auto-inject {}
            fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
            fragment = junit.Junit4Fragment auto-inject {}
            fragment = types.TypesGeneratorFragment auto-inject {}
            fragment = xbase.XbaseGeneratorFragment auto-inject {}
            fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
            fragment = refactoring.RefactorElementNameFragment auto-inject {}
            fragment = compare.CompareFragment auto-inject {}
        }
    }
}
